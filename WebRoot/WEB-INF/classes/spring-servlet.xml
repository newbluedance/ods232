<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"    xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"    xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                           http://www.springframework.org/schema/context    http://www.springframework.org/schema/context/spring-context-4.0.xsd
                           http://www.springframework.org/schema/mvc    http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

    <!--<context:property-placeholder location="classpath:log4j.properties" />-->

    <!-- 自动扫描bean，把作了注解的类转换为bean -->
    <context:component-scan base-package="com.ninetowns.modules.controller,com.ninetowns.modules.webservice"/>

    <!-- 默认的注解映射的支持 ,它会自动注册DefaultAnnotationHandlerMapping 与AnnotationMethodHandlerAdapter -->
    <!-- 启用SpringMVC的注解功能,它会自动注册HandlerMapping、HandlerAdapter、ExceptionResolver的相关实例 -->
    <mvc:annotation-driven />

    <!-- 拦截器 -->
   <!-- <mvc:interceptors>
        &lt;!&ndash; 多个拦截器,顺序执行 &ndash;&gt;
        <mvc:interceptor>
            <mvc:mapping path="/entryOrJsonController/*" />&lt;!&ndash; 如果不配置或/*,将拦截所有的Controller &ndash;&gt;
            <bean class="com.ninetowns.interceptor.CommonInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>-->

    <!-- JSP视图解析器 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:prefix="/" p:suffix=".jsp"/>

    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/*"/>
            <mvc:mapping path="/*/*"/>
            <mvc:mapping path="/*/*/*"/>
            <!--设置拦截的路径-->
            <!--<mvc:mapping path="/login1.htm" />
            <mvc:mapping path="/login2.htm" />-->
            <bean class="com.ninetowns.interceptor.ControllerInterceptor">
                <!--outsideOfficeHoursPage属性指定提示页面的URL-->
                <!-- <property name="outsideOfficeHoursPage">
                     <value>http://localhost:8080/SpringMVCInterceptor/jsp/outsideOfficeHours.jsp
                     </value>
                 </property>-->
            </bean>
        </mvc:interceptor>
    </mvc:interceptors>

    <!-- 默认访问跳转到登录页面(即定义无需Controller的url<->view直接映射) -->
    <mvc:view-controller path="/" view-name="forward:/system/flatBlue_login/login.jsp"/>

    <mvc:default-servlet-handler />

    <!-- 由于web.xml中设置是：由SpringMVC拦截所有请求,于是在读取静态资源文件的时候就会受到影响(说白了就是读不到) -->
    <!-- 经过下面的配置，该标签的作用就是：所有页面中引用"/js/**"的资源，都会从"/resources/js/"里面进行查找 -->
    <!-- 我们可以访问http://IP:8080/xxx/js/my.css和http://IP:8080/xxx/resources/js/my.css对比出来 -->
    <mvc:resources mapping="/libs/**" location="/libs/"/>
    <mvc:resources mapping="/images/**" location="/images/"/>
    <mvc:resources mapping="/WEB-INF/**" location="/WEB-INF/"/>
    <mvc:resources mapping="/system/login/**" location="/system/login/"/>
    <mvc:resources mapping="/system/tabdesk/js/**" location="/system/tabdesk/js/"/>
    <mvc:resources mapping="/system/tabdesk/skin/**" location="/system/tabdesk/skin/"/>
    <mvc:resources mapping="/system/flatBlue_login/skin/**" location="/system/flatBlue_login/skin/"/>
    <mvc:resources mapping="/system/blue1_accordion/skin/**" location="/system/blue1_accordion/skin/"/>


    <!-- SpringMVC在超出上传文件限制时，会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->
    <!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到/WEB-INF/error_fileupload.jsp页面 -->
                <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">WEB-INF/error_fileupload</prop>
                <!-- 处理其它异常(包括Controller抛出的) -->
                <!--<prop key="java.lang.Throwable">/500</prop>-->
            </props>
        </property>
    </bean>

    <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"/>

    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
        <property name="patterns">
            <list>
                <value>com.ninetowns.modules.controller.*</value>
                <value>com.ninetowns.modules.service.impl.*</value>
                <value>com.ninetowns.modules.dao.impl.*</value>
                <value>com.ninetowns.modules.webservice.*</value>
            </list>
        </property>
    </bean>

    <aop:config>
        <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
    </aop:config>

    <!-- 隐式地向 Spring 容器注册  -->
    <!--<context:annotation-config/>-->

    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- one of the properties available; the maximum file size in bytes -->
        <!-- 5M -->
        <property name="defaultEncoding" value="utf-8"/>
        <property name="maxUploadSize" value="25474565"/>
    </bean>
    <!--<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJacksonHttpMessageConverter"/>
            </list>
        </property>
    </bean>
    <bean id="mappingJacksonHttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
            </list>
        </property>
    </bean>-->

    <!-- SpringMVC在超出上传文件限制时，会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->
    <!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->
    <bean id="exceptionResolver"
          class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到/WEB-INF/jsp/error_fileupload.jsp页面 -->
                <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">error_fileupload</prop>
            </props>
        </property>
    </bean>
</beans>